#ifndef VULNERABILITY_DETECTOR_H
#define VULNERABILITY_DETECTOR_H

#include <ida.hpp>
#include <idp.hpp>
#include <bytes.hpp>
#include <segment.hpp>

struct VulnerabilityResult
{
    qstring functionName;
    qstring vulnerabilityType;
    ea_t address;
    int severity;
    qstring description;
    qstring evidence;
};

class VulnerabilityDetector
{
public:
    VulnerabilityDetector();
    ~VulnerabilityDetector();

    bool AnalyzeBufferOverflow(ea_t address);
    bool AnalyzeUseAfterFree(ea_t address);
    bool AnalyzeIntegerOverflow(ea_t address);
    bool AnalyzeIOCTLHandler(ea_t address);
    bool AnalyzeUnsafeFunction(ea_t address);

    void ScanForVulnerabilities();
    std::vector<VulnerabilityResult> GetResults();

private:
    std::vector<VulnerabilityResult> detectionResults;
    
    bool CheckPattern(ea_t startAddress, const char* pattern, const char* mask);
    bool CheckFunctionCall(ea_t address, const char* functionName);
    void AddFinding(const char* functionName, const char* vulnType, ea_t address, int severity, const char* description);
    
    const char* dangerousFunctions[10] = {
        "strcpy", "strcat", "gets", "sprintf", "memcpy",
        "memset", "strncpy", "wcscpy", "ExAllocatePool", "ExAllocatePoolWithTag"
    };
};

#endif
